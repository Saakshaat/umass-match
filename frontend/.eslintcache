[{"C:\\Programming\\umass-match\\frontend\\src\\index.js":"1","C:\\Programming\\umass-match\\frontend\\src\\Routing.js":"2","C:\\Programming\\umass-match\\frontend\\src\\App.js":"3","C:\\Programming\\umass-match\\frontend\\src\\Components\\Navbar.js":"4","C:\\Programming\\umass-match\\frontend\\src\\Components\\userMatchedTo.js":"5","C:\\Programming\\umass-match\\frontend\\src\\Components\\Profile.js":"6","C:\\Programming\\umass-match\\frontend\\src\\Context\\UserDataContext.js":"7","C:\\Programming\\umass-match\\frontend\\src\\Components\\ProtectedRoute.js":"8","C:\\Programming\\umass-match\\frontend\\src\\Context\\AuthContext.js":"9","C:\\Programming\\umass-match\\frontend\\src\\Components\\Landing.js":"10"},{"size":235,"mtime":1608405737465,"results":"11","hashOfConfig":"12"},{"size":2537,"mtime":1608468754801,"results":"13","hashOfConfig":"12"},{"size":3551,"mtime":1608462356099,"results":"14","hashOfConfig":"12"},{"size":749,"mtime":1608465835637,"results":"15","hashOfConfig":"12"},{"size":4190,"mtime":1608443932120,"results":"16","hashOfConfig":"12"},{"size":6764,"mtime":1608456592924,"results":"17","hashOfConfig":"12"},{"size":91,"mtime":1608440301101,"results":"18","hashOfConfig":"12"},{"size":551,"mtime":1608457933987,"results":"19","hashOfConfig":"12"},{"size":88,"mtime":1608457891171,"results":"20","hashOfConfig":"12"},{"size":4744,"mtime":1608468726977,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"116uy4a",{"filePath":"25","messages":"26","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Programming\\umass-match\\frontend\\src\\index.js",[],["46","47"],"C:\\Programming\\umass-match\\frontend\\src\\Routing.js",["48","49"],"C:\\Programming\\umass-match\\frontend\\src\\App.js",["50","51","52"],"C:\\Programming\\umass-match\\frontend\\src\\Components\\Navbar.js",[],"C:\\Programming\\umass-match\\frontend\\src\\Components\\userMatchedTo.js",["53"],"import React, {useRef, useState} from 'react'\r\nimport '../Styles/app.css'\r\nimport useClippy from 'use-clippy';\r\nimport {NotificationContainer, NotificationManager} from 'react-notifications';\r\nimport 'react-notifications/lib/notifications.css';\r\n\r\nexport default function UserMatchedTo({matchData}) {\r\n    let emailRef = useRef(null)\r\n    let [clip, setClip] = useClippy()\r\n    let [beenClicked, setBeenClicked] = useState(false);\r\n    // Contact Arr\r\n    let contactKeys = Object.keys(matchData.contacts)\r\n    let validKeys = contactKeys.filter(curr => matchData.contacts[curr] !== null);\r\n    let contactArr = validKeys.map(curr => {\r\n        if (curr === 'id' || curr === 'user_id'){\r\n            return null\r\n        }\r\n        let valSide = curr !== 'phone' ? matchData.contacts[curr] : parsePhone(matchData.contacts[curr]);\r\n        return {key: capitalize(curr), val: valSide}\r\n    }).filter(el => el !== null)\r\n\r\n    // Details Arr\r\n    let profParsed = []\r\n    let profKeys = Object.keys(matchData.profile);\r\n    for(let i = 0; i < profKeys.length; i+=1){\r\n        let curr = profKeys[i];\r\n        let nextObj;\r\n        if (curr ==='id' || curr === 'user_id' || curr === 'grad_year'){\r\n            continue\r\n        }\r\n        else if (curr === 'umass_residences' || curr === 'clubs' || curr === 'majors'){\r\n            let parsedArr = matchData.profile[curr].map(curr => {\r\n                let pieces = curr.split('_')\r\n                pieces = pieces.map(curr => {\r\n                    return capitalize(curr)\r\n                })\r\n                return pieces.length === 1 ? pieces[0] : pieces.join(' ');\r\n            })\r\n\r\n            nextObj = {key: capitalize(removeUnderscore(curr)), val: parsedArr.join(\",  \")}\r\n        }\r\n        else {\r\n            nextObj = {key: capitalize(removeUnderscore(curr)), val: matchData.profile[curr] ? 'Interested' : 'Not Interested'}\r\n        }\r\n        profParsed.push(nextObj)\r\n    }\r\n\r\n    const copyToClipboard = (e) => {\r\n        if (beenClicked) {\r\n            return\r\n        } \r\n        let email = emailRef.current.innerText;\r\n        email = email.split(' ')[0]\r\n        setClip(email);\r\n        NotificationManager.success(`${matchData.first_name}'s email has been copied to clipboard`, 'Copied!');\r\n        setBeenClicked(true)\r\n        console.log(beenClicked)\r\n        setTimeout(() => {\r\n            setBeenClicked(false)\r\n            console.log(beenClicked)\r\n        }, 3000)\r\n      };\r\n\r\n    return (\r\n        <div className=\"match-found\">\r\n            <h1 className=\"congrats\">We've found you a match!</h1>\r\n            <h1 className=\"match-tagline\">{`Meet ${matchData.first_name} ${matchData.last_name}`} </h1>\r\n            <p className=\"email-tag\" ref={emailRef} onClick={(event) => copyToClipboard(event)}>{matchData.email} - {matchData.profile.grad_year}</p>\r\n            <div className=\"details\">\r\n\r\n                <div className=\"profDetails\">   \r\n                <h3 >{`Profile`}</h3>\r\n                {profParsed.map((curr, idx) => (\r\n                        <h4 key={idx++}><span style={{fontWeight: '400' }}>{curr.key}:</span> {curr.val}</h4>\r\n                    ))}                 \r\n                </div>\r\n\r\n                <div className=\"line\"></div>\r\n                \r\n                <div className=\"contacts\">\r\n                    <h3>{`Contact Info`}</h3>\r\n                    {contactArr.map((curr, idx) => (\r\n                        <h4 key={idx++}><span style={{fontWeight: '400' }}>{curr.key}:</span> {curr.val}</h4>\r\n                    ))}\r\n                </div>\r\n\r\n            </div>\r\n            <NotificationContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst capitalize = (s) => {\r\n    if (typeof s !== 'string') return ''\r\n    return s.charAt(0).toUpperCase() + s.slice(1)\r\n}\r\n\r\nconst parsePhone = (phoneNumber) => {\r\n    let cleaned = ('' + phoneNumber).replace(/\\D/g, '')\r\n    let match = cleaned.match(/^(\\d{3})(\\d{3})(\\d{4})$/)\r\n    if (match) {\r\n      return '(' + match[1] + ') ' + match[2] + '-' + match[3]\r\n    }\r\n    return null\r\n}\r\n\r\nconst removeUnderscore = (str) => {\r\n    let parts = str.split('_');\r\n    parts = parts.map(curr => capitalize(curr));\r\n    return parts.join(' ')\r\n}","C:\\Programming\\umass-match\\frontend\\src\\Components\\Profile.js",["54"],"import React, { useContext, useState }from 'react'\r\nimport Navbar from './Navbar'\r\nimport { UserDataContext } from '../Context/UserDataContext';\r\nimport '../Styles/profile.css';\r\n\r\n\r\n\r\nexport default function Profile() {\r\n    const {userData, setUserData} = useContext(UserDataContext);\r\n    const [isEditing, setIsEditing] = useState(false)\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <Navbar />\r\n            <div className=\"prof-wrapper\">\r\n                <div className=\"title-and-edit-button\">\r\n                    <h1 className=\"title\">{userData.first_name}'s Profile</h1>\r\n                    <button onClick={() => {setIsEditing(!isEditing)}} className=\"edit-prof\">{!isEditing ? 'Edit' : 'Submit' }</button>\r\n                </div>\r\n                <div className=\"line2\"></div>\r\n                <p>Update your profile and your next match will </p>\r\n                <p>be made based on your new preferences.</p>\r\n                <br/>\r\n                {\r\n                    !isEditing\r\n                    ?\r\n                    <div className=\"prof-display-only\">\r\n                        <div className=\"general\">\r\n                            {/* FName, LName, Email */}\r\n                            <h2>General</h2>\r\n                            <div className=\"general-data\">\r\n                                <h3><span>First Name:</span> {capitalize(userData.first_name)}</h3>\r\n                                <h3><span>Last Name:</span> {capitalize(userData.last_name)}</h3>\r\n                                <h3><span>Email:</span> {userData.email}</h3>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"contacts\">\r\n                            {/* Discord, Phone, Snap, Instagram */}\r\n                            <h2>Contact Info.</h2>\r\n                            <div className=\"contact-data\">\r\n                                <h3><span>Discord:</span> {userData.contacts.discord === null ? \"N/A\" : userData.contacts.discord}</h3>\r\n                                <h3><span>Phone:</span> {userData.contacts.phone === null ? \"N/A\" : parsePhone(userData.contacts.phone)}</h3>\r\n                                <h3><span>Snapchat:</span> {userData.contacts.snapchat === null ? \"N/A\" : userData.contacts.snapchat}</h3>\r\n                                <h3><span>Instagram:</span> {userData.contacts.instagram === null ? \"N/A\" : userData.contacts.instagram}</h3>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"prof\">\r\n                            {/* Residences, Clubs, Majors, Grad Year, Video Games, Music, Movies */}\r\n                            <h2>Profile</h2>\r\n                            <div className=\"prof-data\">\r\n                                <h3><span>Residency :</span><br/> {commaize(userData.profile.umass_residences)}</h3>\r\n                                <h3><span>Clubs:</span><br/>{commaize(userData.profile.clubs)}</h3>\r\n                                <h3><span>Major(s):</span><br/>{commaize(userData.profile.majors)}</h3>\r\n                                <h3><span>Video Games:</span><br/>{commaize(userData.profile.video_games)}</h3>\r\n                                <h3><span>Music:</span><br/>{commaize(userData.profile.music)}</h3>\r\n                                <h3><span>Movies:</span><br/>{commaize(userData.profile.movies)}</h3>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"match-history\">\r\n                            {/* List of Date:Name pairs */}\r\n                            <h2>Past Matches</h2>\r\n                            <div className=\"match-data\">\r\n                                { userData.previous_matches.length === 0\r\n                                    ?\r\n                                    <h3>You have no previous matches, go match!</h3>\r\n                                    :\r\n                                    userData.previous_matches.map((curr) => (\r\n                                        <h3>{curr.other_user_name} on {parseDate(curr.matched_at)}</h3>\r\n                                    ))}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    :\r\n                    <></>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst commaize = (arr) => {\r\n    if (arr.length === 0){\r\n        return 'None'\r\n    }\r\n    else{\r\n        arr = arr.map(currWord => removeUnderscore(currWord))\r\n        arr = arr.join(', ');\r\n        return arr\r\n    }\r\n}\r\n\r\nconst capitalize = (s) => {\r\n    if (typeof s !== 'string') return ''\r\n    return s.charAt(0).toUpperCase() + s.slice(1)\r\n}\r\n\r\nconst parsePhone = (phoneNumber) => {\r\n    let cleaned = ('' + phoneNumber).replace(/\\D/g, '')\r\n    let match = cleaned.match(/^(\\d{3})(\\d{3})(\\d{4})$/)\r\n    if (match) {\r\n      return '(' + match[1] + ') ' + match[2] + '-' + match[3]\r\n    }\r\n    return null\r\n}\r\n\r\nconst removeUnderscore = (str) => {\r\n    let parts = str.split('_');\r\n    parts = parts.map(curr => capitalize(curr));\r\n    return parts.join(' ')\r\n}\r\n\r\nconst parseDate = () => {\r\n    let date = '2020-12-20T04:41:15.889166';\r\n    date = date.split('-');\r\n    let [year, month, dayUnaltered] = date;\r\n    let day = dayUnaltered.slice(0, 2)\r\n\r\n    return `${month}/${day}/${year}`\r\n}\r\n\r\n\r\n\r\n// const getMatch = () => {\r\n//     fetch(`http://ec2-52-14-250-55.us-east-2.compute.amazonaws.com/user/${userData.contacts.user_id}/match`, {\r\n//         method: 'POST',\r\n//         headers: {\r\n//           'Accept': 'application/json',\r\n//           'Content-Type': 'application/json',\r\n//         },\r\n//         body: JSON.stringify(makePost(userData))\r\n//     })\r\n//     .then((res) => res.json())\r\n//     .then(data => {\r\n//         console.log(data)\r\n//         // setUserMatched(data);\r\n//     })\r\n//     setIsMatching(!isMatching);\r\n// }\r\n\r\n\r\n// const makePost = () => {\r\n//     return {\r\n//         \"first_name\": userData.first_name,\r\n//         \"last_name\": userData.last_name,\r\n//         \"email\": userData.email,\r\n//         \"contacts\": {\r\n//             \"discord\": userData.contacts.discord,\r\n//             \"phone\": userData.contacts.phone,\r\n//             \"snapchat\": userData.contacts.snapchat\r\n//         },\r\n//         \"profile\": {\r\n//             \"umass_residences\": userData.profile.umass_residences,\r\n//             \"clubs\": userData.profile.clubs,\r\n//             \"majors\": userData.profile.majors,\r\n//             \"grad_year\": userData.profile.grad_year,\r\n//             \"video_games\": userData.profile.video_games,\r\n//             \"music\": userData.profile.music,\r\n//             \"movies\": userData.profile.movies\r\n//         }\r\n//     }\r\n    \r\n// }","C:\\Programming\\umass-match\\frontend\\src\\Context\\UserDataContext.js",[],"C:\\Programming\\umass-match\\frontend\\src\\Components\\ProtectedRoute.js",["55"],"import React, { useContext } from 'react'\r\nimport { Route, Redirect } from 'react-router-dom'\r\nimport { AuthContext } from '../Context/AuthContext';\r\n\r\n\r\nexport default function ProtectedRoute({component: Component, ...rest}) {\r\n    const {authed, setAuthed} = useContext(AuthContext);\r\n\r\n    return (\r\n        <Route path='/home' {...rest} render={(props) => {\r\n            if(authed){\r\n                return <Component {...props}/>\r\n            }\r\n            else{\r\n                return <Redirect to=\"/\"/>\r\n            }\r\n        }} />\r\n    )\r\n}","C:\\Programming\\umass-match\\frontend\\src\\Context\\AuthContext.js",[],"C:\\Programming\\umass-match\\frontend\\src\\Components\\Landing.js",["56","57","58","59","60","61","62","63","64"],{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","severity":1,"message":"70","line":1,"column":17,"nodeType":"71","messageId":"72","endLine":1,"endColumn":27},{"ruleId":"69","severity":1,"message":"73","line":10,"column":7,"nodeType":"71","messageId":"72","endLine":10,"endColumn":18},{"ruleId":"69","severity":1,"message":"74","line":1,"column":39,"nodeType":"71","messageId":"72","endLine":1,"endColumn":48},{"ruleId":"69","severity":1,"message":"75","line":14,"column":22,"nodeType":"71","messageId":"72","endLine":14,"endColumn":33},{"ruleId":"69","severity":1,"message":"76","line":74,"column":7,"nodeType":"71","messageId":"72","endLine":74,"endColumn":17},{"ruleId":"69","severity":1,"message":"77","line":9,"column":10,"nodeType":"71","messageId":"72","endLine":9,"endColumn":14},{"ruleId":"69","severity":1,"message":"75","line":9,"column":22,"nodeType":"71","messageId":"72","endLine":9,"endColumn":33},{"ruleId":"69","severity":1,"message":"78","line":7,"column":20,"nodeType":"71","messageId":"72","endLine":7,"endColumn":29},{"ruleId":"69","severity":1,"message":"79","line":13,"column":12,"nodeType":"71","messageId":"72","endLine":13,"endColumn":18},{"ruleId":"69","severity":1,"message":"80","line":13,"column":20,"nodeType":"71","messageId":"72","endLine":13,"endColumn":29},{"ruleId":"69","severity":1,"message":"81","line":14,"column":12,"nodeType":"71","messageId":"72","endLine":14,"endColumn":18},{"ruleId":"69","severity":1,"message":"82","line":14,"column":20,"nodeType":"71","messageId":"72","endLine":14,"endColumn":29},{"ruleId":"69","severity":1,"message":"83","line":15,"column":26,"nodeType":"71","messageId":"72","endLine":15,"endColumn":41},{"ruleId":"69","severity":1,"message":"84","line":16,"column":25,"nodeType":"71","messageId":"72","endLine":16,"endColumn":39},{"ruleId":"69","severity":1,"message":"85","line":17,"column":24,"nodeType":"71","messageId":"72","endLine":17,"endColumn":37},{"ruleId":"69","severity":1,"message":"86","line":18,"column":19,"nodeType":"71","messageId":"72","endLine":18,"endColumn":27},{"ruleId":"69","severity":1,"message":"87","line":19,"column":24,"nodeType":"71","messageId":"72","endLine":19,"endColumn":37},"no-native-reassign",["88"],"no-negated-in-lhs",["89"],"no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'currentUser' is assigned a value but never used.","'useEffect' is defined but never used.","'setUserData' is assigned a value but never used.","'capitalize' is assigned a value but never used.","'clip' is assigned a value but never used.","'setAuthed' is assigned a value but never used.","'signIn' is assigned a value but never used.","'setSignIn' is assigned a value but never used.","'signUp' is assigned a value but never used.","'setSignUp' is assigned a value but never used.","'setMajorOptions' is assigned a value but never used.","'setClubOptions' is assigned a value but never used.","'setVideoGames' is assigned a value but never used.","'setMusic' is assigned a value but never used.","'setResidences' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]